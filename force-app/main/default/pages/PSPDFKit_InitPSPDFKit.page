<!--
@description       : 
@author            : ChangeMeIn@UserSettingsUnder.SFDoc
@group             : 
@last modified on  : 03-20-2023
@last modified by  : ChangeMeIn@UserSettingsUnder.SFDoc
-->
<apex:page controller="PSPDFKitController">
  <!-- PSPDF Init div -->
  <div id="pspdfkit" style="width: 100%; height: 100vh"></div>

  <script src="{!$Resource.PSPDFKit}" type="text/javascript"></script>
  <script type="text/javascript">
    var getDetails = "{!TemplateData}";
    var base64str;

    //var recId = '{!fileDetail}';
    var updatedFile;
    var tempInstance = null;
    var contVersion;
    var state;
    var pdf;
    var licensekey;
    var baseUrl = `${window.location.protocol}//${window.location.host}{!$Resource.PSPDFKit_lib}/`;
    var baseCoreUrl = `${window.location.protocol}//${window.location.host}{!$Resource.PSPDFKit_core}/`;

    //Added Custom Logic
    if (getDetails != null) {
      base64str = "{!base64String}";
      licensekey = "{!licensekey}"
      if (base64str != null && base64str != "") {
        loadPSPDFKitBase64();
      }
    }

    window.addEventListener("message", function (event) {
     /* tempInstance.contentDocument
        .querySelector(".PSPDFKit-Annotation-Widget[name='"+event.data+"']").focus(); */
    });

    function loadPSPDFKitBase64() {
      var base64 = base64str;
      var binary = atob(base64.replace(/\s/g, ""));
      var len = binary.length;
      var buffer = new ArrayBuffer(len);
      var view = new Uint8Array(buffer);
      for (var i = 0; i < len; i++) {
        view[i] = binary.charCodeAt(i);
      }
      base64str = new Blob([view]);

      base64str.arrayBuffer().then((val) => {
        PSPDFKit.load({
          baseUrl,
          baseCoreUrl,
          container: "#pspdfkit",
          licenseKey: licensekey,
          document: val,
          toolbarItems: PSPDFKit.defaultToolbarItems
            .filter((item) => item.type !== "signature")
            .reduce((acc = [], item) => {
              if (item.type === "ink") {
                return acc.concat([
                  item,
                  { type: "signature", dropdownGroup: "additional-tools" },
                  { type: "form-creator", dropdownGroup: "additional-tools" },
                  {
                    type: "content-editor",
                    dropdownGroup: "additional-tools"
                  },
                  {
                    type: "redact-text-highlighter",
                    dropdownGroup: "additional-tools"
                  },
                  {
                    type: "redact-rectangle",
                    dropdownGroup: "additional-tools"
                  }
                ]);
              }
              return acc.concat([item]);
            }, [])
            .concat([saveButton]),
          disableWebAssemblyStreaming: true,
          isSalesforce: true
        }).then((instance) => {
            fieldList = [];
            //Read Instance
            tempInstance = instance;
            //Send Field Details to LWC
            tempInstance.getFormFields().then((formFields) => {
                fields = []
                formFields.forEach((formField) => {
                    if(!formField.label.startsWith('Signature')){
                        fields.push({'label' : formField.label, 'name': formField.name});
                    }
                });
                sendToLWC(fields, 'fieldDetails');
            });
            //Add Event Listeners to identify
            tempInstance.addEventListener(
              "annotations.focus",
                function (annotationFocusEvent) {
                    // Will log the properties of the widget annotation that was just focused.\
                   console.log('Field Name'+JSON.stringify(annotationFocusEvent.annotation));
                    sendToLWC(annotationFocusEvent.annotation.formFieldName, 'selectedField');
                
                
    
    
        
                
                

                
              }
            );
          })
          .catch((error) => {
            console.log(error);
          });
      });
    }

    var lexOrigin="https://developer95--pspdfkit.sandbox.lightning.force.com"
    function sendToLWC(data, eventName) {
        var payload = data
        var message = {
            name:eventName,
            payload:payload
        };
        parent.postMessage(message,lexOrigin);
    }
    //Custom Logic Till Here

    const saveButton = {
      type: "custom",
      id: "download-pdf",
      title: "Save",
      onPress: () => {
        saveFileToSalesforce();
      }
    };

    if (recId != null) {
      pdf = "{!conbase}";
      if (pdf != "") {
        var base64str = pdf;
        var binary = atob(base64str.replace(/\s/g, ""));
        var len = binary.length;
        var buffer = new ArrayBuffer(len);
        var view = new Uint8Array(buffer);
        for (var i = 0; i < len; i++) {
          view[i] = binary.charCodeAt(i);
        }
        pdf = new Blob([view]);
        loadPSPDFKit();
      }
    }

    window.addEventListener("message", handleOpenAndSaveFiles);

    function handleOpenAndSaveFiles(event) {
      state = event.data.state;
      contVersion = event.data;
      pdf = event.data.versionData;
      if (pdf != "") {
        if (tempInstance == null) {
          loadPSPDFKit();
        } else {
          PSPDFKit.unload(tempInstance);
          loadPSPDFKit();
        }
      }
    }

    function loadPSPDFKit() {
      pdf.arrayBuffer().then((val) => {
        PSPDFKit.load({
          baseUrl,
          baseCoreUrl,
          container: "#pspdfkit",
          licenseKey: 'D2_vhxMpf_SekZno0rlQPxQnhnaNfrZb9R56w6XwtUxPCGqt2IBtTPcCMRe0-dGGElitS5YDUz8yDUgXuEJhmBCVW22C8nadj_MBm5zNyo6kofGg2B4JhlZUtoj-gk7qyIp6N98Ts6tptvhPcEIE9NamH3UOFEtc1YDTVMUUuivZCm02ya7SRShEX1lO4lYDgKRUzf5we4hwyEbyv7M3FhDD51mvnFTB-FuP0D7NOixTJMgoNvz-O_iNEBkbQZFbAjnVkQZQ_eEJdZeV8MvEFlaxSEBHYC9w1A133UHUbrwcyZ0VhkE0XZjmR5xE1hQg-GLVi7LZJnN2XCYn-qqGYHhNxX9dvXjxmGl5wsdK0ISJPv_26InKceqa185x67osumUQijmgtRB9XFOXP6pwql4xZq-JO4xikNS80HA-I2ETdVuDKJKUbpM9Rs5GsZK8RpdXNbxZaJS6GxRrGwPv4PSixqKxdjHeKv6GgyQwx87AWYrTc1p1y7cyGkg3sZnkq80ANKIgZWeEMa8CNg161tkDuDnVvjnb5Z6aZSN4ajuEOWv1qbfRC-Vyo4ZRlXMu6372KmS3VMXXVV30pdmeBZJiZTaMTlku8DG8y4j-oOYAk2U60IdSfuzYsmBcg9KhGsu4lLn3jR61YnGa5Y2Yilv_5Y6pbUGQ3Q9jFcMJ75-mC1r70R9qQU7Uj3cl1N5B394fVXUHIop-mgBuIVKfuQ==',
          document: val,
          toolbarItems: PSPDFKit.defaultToolbarItems
            .filter((item) => item.type !== "signature")
            .reduce((acc = [], item) => {
              if (item.type === "ink") {
                return acc.concat([
                  item,
                  { type: "signature", dropdownGroup: "additional-tools" },
                  { type: "form-creator", dropdownGroup: "additional-tools" },
                  {
                    type: "content-editor",
                    dropdownGroup: "additional-tools"
                  },
                  {
                    type: "redact-text-highlighter",
                    dropdownGroup: "additional-tools"
                  },
                  {
                    type: "redact-rectangle",
                    dropdownGroup: "additional-tools"
                  }
                ]);
              }

              return acc.concat([item]);
            }, [])
            .concat([saveButton]),
          disableWebAssemblyStreaming: true,
        })
          .then((instance) => {
            tempInstance = instance;
          })
          .catch((error) => {
            console.log(error);
          });
      });
    }

    function getBase64(file) {
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = () => {
          let result = reader.result;
          let base64 = "base64,";
          let content = result.indexOf(base64) + base64.length;
          let fileContents = result.substring(content);
          resolve(fileContents);
        };
        reader.onerror = (error) => reject(error);
      });
    }

    function saveFileToSalesforce() {
      tempInstance.exportPDF().then((buffer) => {
        const blob = new Blob([buffer], { type: "application/pdf" });
        getBase64(blob).then((result) => {
          updatedFile = result;
          var Object = new sforce.SObject("contentVersion");
          if (state == "salesforce") {
            Object.ContentDocumentId = contVersion.ContentDocumentId;
            Object.PathOnClient = contVersion.PathOnClient;
            Object.VersionData = updatedFile;
            var res = sforce.connection.create([Object]);
            res[0].success === "true"
              ? alert("File updated")
              : alert("File not updated: " + res[0].errors.message);
          } else if (state == "local") {
            Object.Title = contVersion.fName;
            Object.PathOnClient = contVersion.fName;
            Object.VersionData = updatedFile;
            Object.contentLocation = "S";
            var res = sforce.connection.create([Object]);
            res[0].success === "true"
              ? alert("File Saved Successfully")
              : alert("File not saved: " + res[0].errors.message);
          } else if ("{!contVersion}" != null) {
            Object.ContentDocumentId = "{!contVersion.ContentDocumentId}";
            Object.PathOnClient = "{!contVersion.PathOnClient}";
            Object.VersionData = updatedFile;
            var res = sforce.connection.create([Object]);
            res[0].success === "true"
              ? alert("File updated")
              : alert("File not updated: " + res[0].errors.message);
          }
        });
      });
    }

    function openSalesforceFile(recordId) {
      if (
        window.location.href !=
        window.location.origin + "/apex/PSPDFKit_InitPSPDFKit?id=" + recordId
      ) {
        window.open("/apex/PSPDFKit_InitPSPDFKit?id=" + recordId, "_self");
      }
    }
    
  </script>
</apex:page>